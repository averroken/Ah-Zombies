{"version":3,"sources":["room_1.js"],"names":["TopDownGame","result","room_1","prototype","create","this","createMap","map","addTilesetImage","backgroundlayer","createLayer","blockedLayer","setCollisionBetween","resizeWorld","count","findSpawnPoint","position","player","game","add","sprite","x","y","id","Player","Id","console","log","socket","emit","Map","velocity","physics","arcade","enable","camera","follow","cursors","input","keyboard","createCursorKeys","scale","fullScreenScaleMode","Phaser","ScaleManager","EXACT_FIT","onDown","gofull","createItems","createDoors","addGamePad","isFullScreen","stopFullScreen","startFullScreen","tilemap","items","group","enableBody","length","findObjectsByType","key","forEach","element","createFromTiledObject","doors","gamepad","plugins","Plugin","VirtualGamepad","joystick","addJoystick","button","addButton","type","layer","spawnPosition","Array","objects","offset","undefined","properties","spawnPoint","tileHeight","push","Object","keys","collect","collectable","destroy","index","indexOf","splice","enterDoor","door","targetRoom","targetTileMap","split","state","start","states","update","logJoystick","boolMoved","body","up","isDown","down","left","right","collide","overlap"],"mappings":"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","file":"room_1.js","sourcesContent":["'use strict';\n\nvar TopDownGame = TopDownGame || {};\nvar result;\n\nTopDownGame.room_1 = function () {};\n\nTopDownGame.room_1.prototype = {\n    create: function create() {\n        this.createMap();\n        this.map.addTilesetImage('cute_lpc', 'dungeonTiles');\n        this.backgroundlayer = this.map.createLayer('backgroundLayer');\n        this.blockedLayer = this.map.createLayer('blockedLayer');\n\n        this.map.setCollisionBetween(1, 2000, true, 'blockedLayer');\n\n        this.backgroundlayer.resizeWorld();\n\n        this.count = 0;\n\n        // var result = this.findObjectsByType('playerStart', this.map, 'objectsLayer');\n        result = this.findSpawnPoint('playerStart', this.map, 'objectsLayer', this.position);\n\n        this.player = this.game.add.sprite(result[0].x, result[0].y, 'player');\n        this.player.id = Player.Id;\n        console.log(\"My id: \" + Player.Id);\n\n        socket.emit('getPlayers');\n\n        console.log(Player.Map);\n\n        socket.emit(\"moveMyPlayer\", {\n            id: this.player.id,\n            x: this.player.x,\n            y: this.player.y,\n            map: Player.Map\n        });\n        this.player.velocity = 75;\n\n        this.game.physics.arcade.enable(this.player);\n\n        this.game.camera.follow(this.player);\n\n        this.cursors = this.game.input.keyboard.createCursorKeys();\n\n        this.game.scale.fullScreenScaleMode = Phaser.ScaleManager.EXACT_FIT;\n        this.game.input.onDown.add(this.gofull, this);\n\n        this.createItems();\n        this.createDoors();\n        this.addGamePad();\n    },\n    gofull: function gofull() {\n        if (this.game.scale.isFullScreen) {\n            this.game.scale.stopFullScreen();\n        } else {\n            this.game.scale.startFullScreen(false);\n        }\n    },\n    createMap: function createMap() {\n        this.map = this.game.add.tilemap('room_1');\n        if (!this.position) this.position = \"down\";\n    },\n    createItems: function createItems() {\n        console.log(this.map);\n        this.items = this.game.add.group();\n        this.items.enableBody = true;\n        var item;\n        console.log(items.length);\n        if (!(items.length >= 0)) {\n            console.log(\"length new: :\" + items.length);\n            result = this.findObjectsByType('item', this.map, 'objectsLayer');\n            items = result;\n            socket.emit(\"setItemList\", items, this.map.key);\n        } else console.log(items.length);\n        console.log(this.items.length);\n        items.forEach(function (element) {\n            this.createFromTiledObject(element, this.items);\n        }, this);\n        console.log(this.items.length);\n    },\n    createDoors: function createDoors() {\n        this.doors = this.game.add.group();\n        this.doors.enableBody = true;\n        result = this.findObjectsByType('door', this.map, 'objectsLayer');\n\n        result.forEach(function (element) {\n            this.createFromTiledObject(element, this.doors);\n        }, this);\n    },\n    addGamePad: function addGamePad() {\n        // Add the VirtualGamepad plugin to the game\n        this.gamepad = this.game.plugins.add(Phaser.Plugin.VirtualGamepad);\n\n        // Add a joystick to the game (only one is allowed right now)\n        this.joystick = this.gamepad.addJoystick(100, 420, 1.2, 'gamepad');\n\n        // Add a button to the game (only one is allowed right now)\n        this.button = this.gamepad.addButton(400, 420, 1.0, 'gamepad');\n    },\n    findSpawnPoint: function findSpawnPoint(type, map, layer, spawnPosition) {\n        var result = new Array();\n        if (result.length < 0) return;\n        map.objects[layer].forEach(function (element) {\n            var offset = 0;\n            if (element.properties.offset != undefined) {\n                offset = element.properties.offset;\n            }\n            if (element.properties.spawnPoint === spawnPosition) {\n                console.log(\"-------> spawn point found\");\n            } else {\n                console.log(\"-------> spawn NOT point found --------------\");\n                return;\n            }\n            if (element.properties.type === type) {\n                element.y -= map.tileHeight + 45 + offset;\n                result.push(element);\n            }\n        });\n        return result;\n    },\n    findObjectsByType: function findObjectsByType(type, map, layer) {\n        var result = new Array();\n        if (result.length < 0) return;\n        map.objects[layer].forEach(function (element) {\n            var offset = 0;\n            if (element.properties.offset != undefined) {\n                offset = element.properties.offset;\n            }\n            if (element.properties.type === type) {\n                element.y -= map.tileHeight + 45 + offset;\n                result.push(element);\n            }\n        });\n        return result;\n    },\n    createFromTiledObject: function createFromTiledObject(element, group) {\n        var sprite = group.create(element.x, element.y, element.properties.sprite);\n\n        Object.keys(element.properties).forEach(function (key) {\n            sprite[key] = element.properties[key];\n        });\n    },\n    collect: function collect(player, collectable) {\n        console.log(this.map);\n        var Map = this.map;\n        if (collectable.sprite == 'bluecup' || collectable.sprite == 'greencup') {\n            player.velocity = 100;\n        }\n        collectable.destroy();\n        items.forEach(function (element) {\n            if (element.x === collectable.position.x && element.y === collectable.position.y) {\n                var index = items.indexOf(element);\n                items.splice(index, 1);\n                console.log(items.length);\n                console.log(Map.key);\n                socket.emit(\"updateItemList\", items, Map.key);\n            }\n        });\n        // socket.emit(\"updateItemList\", items);\n    },\n    enterDoor: function enterDoor(player, door) {\n        var targetRoom = door.targetTileMap.split('|');\n        console.log('entering the door');\n        console.log('targetTileMap: ' + targetRoom[0]);\n        socket.emit('changeMap', targetRoom[0], Player.Id);\n        TopDownGame.game.state.start(targetRoom[0]);\n        console.log('entering the door');\n        console.log('targetTileMap: ' + targetRoom[0]);\n        console.log('targetSpawnPoint: ' + targetRoom[1]);\n\n        TopDownGame.game.state.states[targetRoom[0]].position = targetRoom[1];\n        TopDownGame.game.state.start(targetRoom[0]);\n    },\n    update: function update() {\n        // console.log(this.count);\n        this.logJoystick();\n        var boolMoved = false;\n        this.player.body.velocity.y = 0;\n        this.player.body.velocity.x = 0;\n\n        if (this.cursors.up.isDown) {\n            this.player.body.velocity.y -= this.player.velocity;\n            boolMoved = true;\n        } else if (this.cursors.down.isDown) {\n            this.player.body.velocity.y += this.player.velocity;\n            boolMoved = true;\n        }\n        if (this.cursors.left.isDown) {\n            this.player.body.velocity.x -= this.player.velocity;\n            boolMoved = true;\n        } else if (this.cursors.right.isDown) {\n            this.player.body.velocity.x += this.player.velocity;\n            boolMoved = true;\n        }\n\n        this.game.physics.arcade.collide(this.player, this.blockedLayer);\n        this.game.physics.arcade.overlap(this.player, this.items, this.collect, null, this);\n        this.game.physics.arcade.overlap(this.player, this.doors, this.enterDoor, null, this);\n        if (boolMoved) {\n            this.count++;\n            if (this.count % 2 == 0) {\n                // console.log(this.count);\n                socket.emit(\"moveMyPlayer\", {\n                    id: this.player.id,\n                    x: this.player.x,\n                    y: this.player.y,\n                    map: Player.Map\n                });\n            }\n        }\n    },\n    logJoystick: function logJoystick() {\n        if (this.joystick.properties.up) console.log(\"JOYSTICK: up\");\n        if (this.joystick.properties.down) console.log(\"JOYSTICK: down\");\n        if (this.joystick.properties.left) console.log(\"JOYSTICK: left\");\n        if (this.joystick.properties.right) console.log(\"JOYSTICK: right\");\n    }\n};"]}