{"version":3,"sources":["room_1.js"],"names":["TopDownGame","result","room_1","prototype","create","this","createMap","map","addTilesetImage","backgroundlayer","createLayer","blockedLayer","setCollisionBetween","resizeWorld","count","findSpawnPoint","position","player","game","add","sprite","x","y","id","Player","Id","socket","emit","Map","velocity","physics","arcade","enable","camera","follow","cursors","input","keyboard","createCursorKeys","scale","fullScreenScaleMode","Phaser","ScaleManager","SHOW_ALL","createItems","createDoors","addGamePad","addButtons","gofull","isFullScreen","stopFullScreen","startFullScreen","enableJoysticks","joystick","enabled","visible","button","gamepad","joystickPad","tilemap","console","log","items","group","enableBody","length","findObjectsByType","key","forEach","element","createFromTiledObject","doors","plugins","Plugin","VirtualGamepad","addJoystick","height","addButton","width","buttons","fullScreenButton","fixedToCamera","joystickButton","world","bringToTop","type","layer","spawnPosition","Array","objects","offset","undefined","properties","spawnPoint","tileHeight","push","Object","keys","collect","collectable","destroy","index","indexOf","splice","enterDoor","door","targetRoom","targetTileMap","split","state","states","start","update","boolMoved","logJoystick","body","up","isDown","down","left","right","collide","overlap"],"mappings":"AAAA,YAEA,IAAIA,aAAcA,gBACdC,MAEJD,aAAYE,OAAS,aAErBF,YAAYE,OAAOC,WACfC,OAAQ,WACJC,KAAKC,YACLD,KAAKE,IAAIC,gBAAgB,WAAY,gBACrCH,KAAKI,gBAAkBJ,KAAKE,IAAIG,YAAY,mBAC5CL,KAAKM,aAAeN,KAAKE,IAAIG,YAAY,gBAEzCL,KAAKE,IAAIK,oBAAoB,EAAG,KAAM,EAAM,gBAE5CP,KAAKI,gBAAgBI,cAErBR,KAAKS,MAAQ,EAGbb,OAASI,KAAKU,eAAe,cAAeV,KAAKE,IAAK,eAAgBF,KAAKW,UAE3EX,KAAKY,OAASZ,KAAKa,KAAKC,IAAIC,OAAOnB,OAAO,GAAGoB,EAAGpB,OAAO,GAAGqB,EAAG,UAC7DjB,KAAKY,OAAOM,GAAKC,OAAOC,GAGxBC,OAAOC,KAAK,cAIZD,OAAOC,KAAK,gBACRJ,GAAIlB,KAAKY,OAAOM,GAChBF,EAAGhB,KAAKY,OAAOI,EACfC,EAAGjB,KAAKY,OAAOK,EACff,IAAKiB,OAAOI,MAEhBvB,KAAKY,OAAOY,SAAW,GAEvBxB,KAAKa,KAAKY,QAAQC,OAAOC,OAAO3B,KAAKY,QAErCZ,KAAKa,KAAKe,OAAOC,OAAO7B,KAAKY,QAE7BZ,KAAK8B,QAAU9B,KAAKa,KAAKkB,MAAMC,SAASC,mBAExCjC,KAAKa,KAAKqB,MAAMC,oBAAsBC,OAAOC,aAAaC,SAG1DtC,KAAKuC,cACLvC,KAAKwC,cACLxC,KAAKyC,aACLzC,KAAK0C,cAETC,OAAQ,WACA3C,KAAKa,KAAKqB,MAAMU,aAChB5C,KAAKa,KAAKqB,MAAMW,iBAEhB7C,KAAKa,KAAKqB,MAAMY,iBAAgB,IAGxCC,gBAAiB,WACb/C,KAAKgD,SAASC,SAAWjD,KAAKgD,SAASC,QACvCjD,KAAKgD,SAASE,SAAWlD,KAAKgD,SAASE,QACvClD,KAAKmD,OAAOD,SAAWlD,KAAKmD,OAAOD,QACnClD,KAAKoD,QAAQC,YAAYH,SAAWlD,KAAKoD,QAAQC,YAAYH,SAIjEjD,UAAW,WACPD,KAAKE,IAAMF,KAAKa,KAAKC,IAAIwC,QAAQ,UAC5BtD,KAAKW,WAAUX,KAAKW,SAAW,SAExC4B,YAAa,WACTgB,QAAQC,IAAIxD,KAAKE,KACjBF,KAAKyD,MAAQzD,KAAKa,KAAKC,IAAI4C,QAC3B1D,KAAKyD,MAAME,YAAa,CAGlBF,OAAMG,QAAU,EAKfL,QAAQC,IAAIC,MAAMG,SAHrBhE,OAASI,KAAK6D,kBAAkB,OAAQ7D,KAAKE,IAAK,gBAClDuD,MAAQ7D,OACRyB,OAAOC,KAAK,cAAemC,MAAOzD,KAAKE,IAAI4D,MAG/CL,MAAMM,QAAQ,SAAUC,GACpBhE,KAAKiE,sBAAsBD,EAAShE,KAAKyD,QAC1CzD,OAGPwC,YAAa,WACTxC,KAAKkE,MAAQlE,KAAKa,KAAKC,IAAI4C,QAC3B1D,KAAKkE,MAAMP,YAAa,EACxB/D,OAASI,KAAK6D,kBAAkB,OAAQ7D,KAAKE,IAAK,gBAElDN,OAAOmE,QAAQ,SAAUC,GACrBhE,KAAKiE,sBAAsBD,EAAShE,KAAKkE,QAC1ClE,OAEPyC,WAAY,WAGRzC,KAAKoD,QAAUpD,KAAKa,KAAKsD,QAAQrD,IAAIsB,OAAOgC,OAAOC,gBAGnDrE,KAAKgD,SAAWhD,KAAKoD,QAAQkB,YAAY,GAAItE,KAAKa,KAAK0D,OAAS,GAAI,GAAK,WAGzEvE,KAAKmD,OAASnD,KAAKoD,QAAQoB,UAAUxE,KAAKa,KAAK4D,MAAQ,GAAIzE,KAAKa,KAAK0D,OAAS,GAAI,GAAK,WAEvFvE,KAAKgD,SAASC,SAAU,EACxBjD,KAAKgD,SAASE,SAAU,EACxBlD,KAAKmD,OAAOD,SAAU,EACtBlD,KAAKoD,QAAQC,YAAYH,SAAU,GAGvCR,WAAY,WACR1C,KAAK0E,QAAU1E,KAAKa,KAAKC,IAAI4C,QAC7B1D,KAAK2E,iBAAmB3E,KAAKc,IAAIqC,OAAOnD,KAAKa,KAAK4D,MAAQ,GAAI,EAAG,mBAAoBzE,KAAK2C,OAAQ3C,KAAM,EAAG,EAAG,EAAG,EAAGA,KAAK0E,SACzH1E,KAAK2E,iBAAiBC,eAAgB,EACtC5E,KAAK6E,eAAiB7E,KAAKc,IAAIqC,OAAOnD,KAAKa,KAAK4D,MAAQ,GAAI,GAAI,iBAAkBzE,KAAK+C,gBAAiB/C,KAAM,EAAG,EAAG,EAAG,EAAGA,KAAK0E,SAC/H1E,KAAK6E,eAAeD,eAAgB,EACpC5E,KAAKa,KAAKiE,MAAMC,WAAW/E,KAAK0E,UAEpChE,eAAgB,SAAwBsE,EAAM9E,EAAK+E,EAAOC,GACtD,GAAItF,GAAS,GAAIuF,MACjB,MAAIvF,EAAOgE,OAAS,GAiBpB,MAhBA1D,GAAIkF,QAAQH,GAAOlB,QAAQ,SAAUC,GACjC,GAAIqB,GAAS,CACoBC,SAA7BtB,EAAQuB,WAAWF,SACnBA,EAASrB,EAAQuB,WAAWF,QAE5BrB,EAAQuB,WAAWC,aAAeN,GAMlClB,EAAQuB,WAAWP,OAASA,IAC5BhB,EAAQ/C,GAAKf,EAAIuF,WAAa,GAAKJ,EACnCzF,EAAO8F,KAAK1B,MAGbpE,GAEXiE,kBAAmB,SAA2BmB,EAAM9E,EAAK+E,GACrD,GAAIrF,GAAS,GAAIuF,MACjB,MAAIvF,EAAOgE,OAAS,GAWpB,MAVA1D,GAAIkF,QAAQH,GAAOlB,QAAQ,SAAUC,GACjC,GAAIqB,GAAS,CACoBC,SAA7BtB,EAAQuB,WAAWF,SACnBA,EAASrB,EAAQuB,WAAWF,QAE5BrB,EAAQuB,WAAWP,OAASA,IAC5BhB,EAAQ/C,GAAKf,EAAIuF,WAAa,GAAKJ,EACnCzF,EAAO8F,KAAK1B,MAGbpE,GAEXqE,sBAAuB,SAA+BD,EAASN,GAC3D,GAAI3C,GAAS2C,EAAM3D,OAAOiE,EAAQhD,EAAGgD,EAAQ/C,EAAG+C,EAAQuB,WAAWxE,OAEnE4E,QAAOC,KAAK5B,EAAQuB,YAAYxB,QAAQ,SAAUD,GAC9C/C,EAAO+C,GAAOE,EAAQuB,WAAWzB,MAGzC+B,QAAS,SAAiBjF,EAAQkF,GAC9BvC,QAAQC,IAAIxD,KAAKE,IACjB,IAAIqB,GAAMvB,KAAKE,GACW,YAAtB4F,EAAY/E,QAA6C,YAAtB+E,EAAY/E,SAC/CH,EAAOY,SAAW,KAEtBsE,EAAYC,UACZtC,MAAMM,QAAQ,SAAUC,GACpB,GAAIA,EAAQhD,IAAM8E,EAAYnF,SAASK,GAAKgD,EAAQ/C,IAAM6E,EAAYnF,SAASM,EAAG,CAC9E,GAAI+E,GAAQvC,MAAMwC,QAAQjC,EAC1BP,OAAMyC,OAAOF,EAAO,GACpBzC,QAAQC,IAAIC,MAAMG,QAClBL,QAAQC,IAAIjC,EAAIuC,KAChBzC,OAAOC,KAAK,iBAAkBmC,MAAOlC,EAAIuC,SAKrDqC,UAAW,SAAmBvF,EAAQwF,GAClC,GAAIC,GAAaD,EAAKE,cAAcC,MAAM,IAC1ChD,SAAQC,IAAI,qBACZD,QAAQC,IAAI,kBAAoB6C,EAAW,IAC3ChF,OAAOC,KAAK,YAAa+E,EAAW,GAAIlF,OAAOC,IAE/CmC,QAAQC,IAAI,qBACZD,QAAQC,IAAI,kBAAoB6C,EAAW,IAC3C9C,QAAQC,IAAI,qBAAuB6C,EAAW,IAE9C1G,YAAYkB,KAAK2F,MAAMC,OAAOJ,EAAW,IAAI1F,SAAW0F,EAAW,GACnE1G,YAAYkB,KAAK2F,MAAME,MAAML,EAAW,KAE5CM,OAAQ,WAEJ,GAAIC,IAAY,CACZ5G,MAAKgD,SAASC,SAASjD,KAAK6G,cAChC7G,KAAKY,OAAOkG,KAAKtF,SAASP,EAAI,EAC9BjB,KAAKY,OAAOkG,KAAKtF,SAASR,EAAI,EAE1BhB,KAAK8B,QAAQiF,GAAGC,QAChBhH,KAAKY,OAAOkG,KAAKtF,SAASP,GAAKjB,KAAKY,OAAOY,SAC3CoF,GAAY,GACL5G,KAAK8B,QAAQmF,KAAKD,SACzBhH,KAAKY,OAAOkG,KAAKtF,SAASP,GAAKjB,KAAKY,OAAOY,SAC3CoF,GAAY,GAEZ5G,KAAK8B,QAAQoF,KAAKF,QAClBhH,KAAKY,OAAOkG,KAAKtF,SAASR,GAAKhB,KAAKY,OAAOY,SAC3CoF,GAAY,GACL5G,KAAK8B,QAAQqF,MAAMH,SAC1BhH,KAAKY,OAAOkG,KAAKtF,SAASR,GAAKhB,KAAKY,OAAOY,SAC3CoF,GAAY,GAGhB5G,KAAKa,KAAKY,QAAQC,OAAO0F,QAAQpH,KAAKY,OAAQZ,KAAKM,cACnDN,KAAKa,KAAKY,QAAQC,OAAO2F,QAAQrH,KAAKY,OAAQZ,KAAKyD,MAAOzD,KAAK6F,QAAS,KAAM7F,MAC9EA,KAAKa,KAAKY,QAAQC,OAAO2F,QAAQrH,KAAKY,OAAQZ,KAAKkE,MAAOlE,KAAKmG,UAAW,KAAMnG,MAC5E4G,IACA5G,KAAKS,QACDT,KAAKS,MAAQ,GAAK,GAElBY,OAAOC,KAAK,gBACRJ,GAAIlB,KAAKY,OAAOM,GAChBF,EAAGhB,KAAKY,OAAOI,EACfC,EAAGjB,KAAKY,OAAOK,EACff,IAAKiB,OAAOI,QAK5BsF,YAAa,WACL7G,KAAKgD,SAASuC,WAAWwB,GACzB/G,KAAK8B,QAAQiF,GAAGC,QAAS,EAGzBhH,KAAK8B,QAAQiF,GAAGC,QAAS,EAEzBhH,KAAKgD,SAASuC,WAAW0B,KACzBjH,KAAK8B,QAAQmF,KAAKD,QAAS,EAG3BhH,KAAK8B,QAAQmF,KAAKD,QAAS,EAE3BhH,KAAKgD,SAASuC,WAAW4B,MACzBnH,KAAK8B,QAAQqF,MAAMH,QAAS,EAG5BhH,KAAK8B,QAAQqF,MAAMH,QAAS,EAE5BhH,KAAKgD,SAASuC,WAAW2B,KACzBlH,KAAK8B,QAAQoF,KAAKF,QAAS,EAG3BhH,KAAK8B,QAAQoF,KAAKF,QAAS","file":"room_1.js","sourcesContent":["'use strict';\n\nvar TopDownGame = TopDownGame || {};\nvar result;\n\nTopDownGame.room_1 = function () {};\n\nTopDownGame.room_1.prototype = {\n    create: function create() {\n        this.createMap();\n        this.map.addTilesetImage('cute_lpc', 'dungeonTiles');\n        this.backgroundlayer = this.map.createLayer('backgroundLayer');\n        this.blockedLayer = this.map.createLayer('blockedLayer');\n\n        this.map.setCollisionBetween(1, 2000, true, 'blockedLayer');\n\n        this.backgroundlayer.resizeWorld();\n\n        this.count = 0;\n\n        // var result = this.findObjectsByType('playerStart', this.map, 'objectsLayer');\n        result = this.findSpawnPoint('playerStart', this.map, 'objectsLayer', this.position);\n\n        this.player = this.game.add.sprite(result[0].x, result[0].y, 'player');\n        this.player.id = Player.Id;\n        // console.log(\"My id: \" + Player.Id);\n\n        socket.emit('getPlayers');\n\n        // console.log(Player.Map);\n\n        socket.emit(\"moveMyPlayer\", {\n            id: this.player.id,\n            x: this.player.x,\n            y: this.player.y,\n            map: Player.Map\n        });\n        this.player.velocity = 75;\n\n        this.game.physics.arcade.enable(this.player);\n\n        this.game.camera.follow(this.player);\n\n        this.cursors = this.game.input.keyboard.createCursorKeys();\n\n        this.game.scale.fullScreenScaleMode = Phaser.ScaleManager.SHOW_ALL;\n        // this.game.input.onDown.add(this.gofull, this);\n\n        this.createItems();\n        this.createDoors();\n        this.addGamePad();\n        this.addButtons();\n    },\n    gofull: function gofull() {\n        if (this.game.scale.isFullScreen) {\n            this.game.scale.stopFullScreen();\n        } else {\n            this.game.scale.startFullScreen(false);\n        }\n    },\n    enableJoysticks: function enableJoysticks() {\n        this.joystick.enabled = !this.joystick.enabled;\n        this.joystick.visible = !this.joystick.visible;\n        this.button.visible = !this.button.visible;\n        this.gamepad.joystickPad.visible = !this.gamepad.joystickPad.visible;\n        // console.log(this.joystick);\n        // console.log(this.gamepad);\n    },\n    createMap: function createMap() {\n        this.map = this.game.add.tilemap('room_1');\n        if (!this.position) this.position = \"down\";\n    },\n    createItems: function createItems() {\n        console.log(this.map);\n        this.items = this.game.add.group();\n        this.items.enableBody = true;\n        var item;\n        // console.log(items.length);\n        if (!(items.length >= 0)) {\n            // console.log(\"length new: :\" + items.length);\n            result = this.findObjectsByType('item', this.map, 'objectsLayer');\n            items = result;\n            socket.emit(\"setItemList\", items, this.map.key);\n        } else console.log(items.length);\n        // console.log(this.items.length);\n        items.forEach(function (element) {\n            this.createFromTiledObject(element, this.items);\n        }, this);\n        // console.log(this.items.length);\n    },\n    createDoors: function createDoors() {\n        this.doors = this.game.add.group();\n        this.doors.enableBody = true;\n        result = this.findObjectsByType('door', this.map, 'objectsLayer');\n\n        result.forEach(function (element) {\n            this.createFromTiledObject(element, this.doors);\n        }, this);\n    },\n    addGamePad: function addGamePad() {\n        // console.log(\"gamepad added\");\n        // Add the VirtualGamepad plugin to the game\n        this.gamepad = this.game.plugins.add(Phaser.Plugin.VirtualGamepad);\n\n        // Add a joystick to the game (only one is allowed right now)\n        this.joystick = this.gamepad.addJoystick(50, this.game.height - 50, 0.5, 'gamepad');\n\n        // Add a button to the game (only one is allowed right now)\n        this.button = this.gamepad.addButton(this.game.width - 50, this.game.height - 50, 0.5, 'gamepad');\n\n        this.joystick.enabled = false;\n        this.joystick.visible = false;\n        this.button.visible = false;\n        this.gamepad.joystickPad.visible = false;\n        // console.log(this.joystick);\n    },\n    addButtons: function addButtons() {\n        this.buttons = this.game.add.group();\n        this.fullScreenButton = this.add.button(this.game.width - 25, 5, 'fullScreenButton', this.gofull, this, 0, 0, 0, 0, this.buttons);\n        this.fullScreenButton.fixedToCamera = true;\n        this.joystickButton = this.add.button(this.game.width - 25, 30, 'joystickButton', this.enableJoysticks, this, 0, 0, 0, 0, this.buttons);\n        this.joystickButton.fixedToCamera = true;\n        this.game.world.bringToTop(this.buttons);\n    },\n    findSpawnPoint: function findSpawnPoint(type, map, layer, spawnPosition) {\n        var result = new Array();\n        if (result.length < 0) return;\n        map.objects[layer].forEach(function (element) {\n            var offset = 0;\n            if (element.properties.offset != undefined) {\n                offset = element.properties.offset;\n            }\n            if (element.properties.spawnPoint === spawnPosition) {\n                // console.log(\"-------> spawn point found\")\n            } else {\n                // console.log(\"-------> spawn NOT point found --------------\");\n                return;\n            }\n            if (element.properties.type === type) {\n                element.y -= map.tileHeight + 45 + offset;\n                result.push(element);\n            }\n        });\n        return result;\n    },\n    findObjectsByType: function findObjectsByType(type, map, layer) {\n        var result = new Array();\n        if (result.length < 0) return;\n        map.objects[layer].forEach(function (element) {\n            var offset = 0;\n            if (element.properties.offset != undefined) {\n                offset = element.properties.offset;\n            }\n            if (element.properties.type === type) {\n                element.y -= map.tileHeight + 45 + offset;\n                result.push(element);\n            }\n        });\n        return result;\n    },\n    createFromTiledObject: function createFromTiledObject(element, group) {\n        var sprite = group.create(element.x, element.y, element.properties.sprite);\n\n        Object.keys(element.properties).forEach(function (key) {\n            sprite[key] = element.properties[key];\n        });\n    },\n    collect: function collect(player, collectable) {\n        console.log(this.map);\n        var Map = this.map;\n        if (collectable.sprite == 'bluecup' || collectable.sprite == 'greencup') {\n            player.velocity = 100;\n        }\n        collectable.destroy();\n        items.forEach(function (element) {\n            if (element.x === collectable.position.x && element.y === collectable.position.y) {\n                var index = items.indexOf(element);\n                items.splice(index, 1);\n                console.log(items.length);\n                console.log(Map.key);\n                socket.emit(\"updateItemList\", items, Map.key);\n            }\n        });\n        // socket.emit(\"updateItemList\", items);\n    },\n    enterDoor: function enterDoor(player, door) {\n        var targetRoom = door.targetTileMap.split('|');\n        console.log('entering the door');\n        console.log('targetTileMap: ' + targetRoom[0]);\n        socket.emit('changeMap', targetRoom[0], Player.Id);\n        // TopDownGame.game.state.start(targetRoom[0]);\n        console.log('entering the door');\n        console.log('targetTileMap: ' + targetRoom[0]);\n        console.log('targetSpawnPoint: ' + targetRoom[1]);\n\n        TopDownGame.game.state.states[targetRoom[0]].position = targetRoom[1];\n        TopDownGame.game.state.start(targetRoom[0]);\n    },\n    update: function update() {\n        // console.log(this.count);\n        var boolMoved = false;\n        if (this.joystick.enabled) this.logJoystick();\n        this.player.body.velocity.y = 0;\n        this.player.body.velocity.x = 0;\n\n        if (this.cursors.up.isDown) {\n            this.player.body.velocity.y -= this.player.velocity;\n            boolMoved = true;\n        } else if (this.cursors.down.isDown) {\n            this.player.body.velocity.y += this.player.velocity;\n            boolMoved = true;\n        }\n        if (this.cursors.left.isDown) {\n            this.player.body.velocity.x -= this.player.velocity;\n            boolMoved = true;\n        } else if (this.cursors.right.isDown) {\n            this.player.body.velocity.x += this.player.velocity;\n            boolMoved = true;\n        }\n\n        this.game.physics.arcade.collide(this.player, this.blockedLayer);\n        this.game.physics.arcade.overlap(this.player, this.items, this.collect, null, this);\n        this.game.physics.arcade.overlap(this.player, this.doors, this.enterDoor, null, this);\n        if (boolMoved) {\n            this.count++;\n            if (this.count % 2 == 0) {\n                // console.log(this.count);\n                socket.emit(\"moveMyPlayer\", {\n                    id: this.player.id,\n                    x: this.player.x,\n                    y: this.player.y,\n                    map: Player.Map\n                });\n            }\n        }\n    },\n    logJoystick: function logJoystick() {\n        if (this.joystick.properties.up) {\n            this.cursors.up.isDown = true;\n            // console.log(\"JOYSTICK: up\");\n        } else {\n            this.cursors.up.isDown = false;\n        }\n        if (this.joystick.properties.down) {\n            this.cursors.down.isDown = true;\n            // console.log(\"JOYSTICK: down\");\n        } else {\n            this.cursors.down.isDown = false;\n        }\n        if (this.joystick.properties.right) {\n            this.cursors.right.isDown = true;\n            // console.log(\"JOYSTICK: right\");\n        } else {\n            this.cursors.right.isDown = false;\n        }\n        if (this.joystick.properties.left) {\n            this.cursors.left.isDown = true;\n            // console.log(\"JOYSTICK: left\");\n        } else {\n            this.cursors.left.isDown = false;\n        }\n    }\n};"]}