{"version":3,"sources":["phaser-plugin-virtual-gamepad.js"],"names":["Phaser","UP_LOWER_BOUND","Math","PI","UP_UPPER_BOUND","DOWN_LOWER_BOUND","DOWN_UPPER_BOUND","RIGHT_LOWER_BOUND","RIGHT_UPPER_BOUND","LEFT_LOWER_BOUND","LEFT_UPPER_BOUND","Plugin","VirtualGamepad","game","parent","call","this","input","joystick","joystickPad","joystickPoint","joystickRadius","joystickPointer","button","buttonPoint","buttonRadius","preUpdate","gamepadPoll","bind","prototype","Object","create","constructor","addJoystick","x","y","scale","key","add","sprite","frame","anchor","set","fixedToCamera","setTo","Point","properties","inUse","up","down","left","right","distance","angle","rotation","width","addButton","isDown","resetJoystick","pointers","forEach","p","testDistance","mousePointer","isUp","moveJoystick","pointer","that","reset","d","position","point","deltaX","deltaY","cos","sin","parseInt","cameraOffset"],"mappings":"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","file":"phaser-plugin-virtual-gamepad.js","sourcesContent":["'use strict';\n\n/**\n * Phaser Plugin - Virtual Gamepad\n * @author      Shawn Hymel <@ShawnHymel>\n * @copyright   2016 Shawn Hymel\n * @license     {@link http://opensource.org/licenses/MIT}\n * @version     0.1.0\n *\n * Joystick math is based on work by Eugenio Fage, whose original touch control\n * plugin can be found at: \n * https://github.com/Gamegur-us/phaser-touch-control-plugin\n *\n * The MIT License (MIT)\n * Copyright (c) 2016 Shawn Hymel\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy \n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights \n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell \n * copies of the Software, and to permit persons to whom the Software is \n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in \n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n(function (Phaser) {\n    'use strict';\n\n    // Static variables\n\n    var UP_LOWER_BOUND = -7 * (Math.PI / 8);\n    var UP_UPPER_BOUND = -1 * (Math.PI / 8);\n    var DOWN_LOWER_BOUND = Math.PI / 8;\n    var DOWN_UPPER_BOUND = 7 * (Math.PI / 8);\n    var RIGHT_LOWER_BOUND = -3 * (Math.PI / 8);\n    var RIGHT_UPPER_BOUND = 3 * (Math.PI / 8);\n    var LEFT_LOWER_BOUND = 5 * (Math.PI / 8);\n    var LEFT_UPPER_BOUND = -5 * (Math.PI / 8);\n\n    /**\n     * The Virtual Gamepad adds a thumbstick and button(s) to mobile devices.\n     *\n     * @class Phaser.Plugin.VirtualGamepad\n     * @constructor\n     * @param {Object} game - The main Game object\n     * @param {Any} parent - Object that owns this plugin (e.g. Phaser.PluginManager)\n     */\n    Phaser.Plugin.VirtualGamepad = function (game, parent) {\n\n        // Call parent\n        Phaser.Plugin.call(this, game, parent);\n\n        // Class members\n        this.input = this.game.input;\n        this.joystick = null;\n        this.joystickPad = null;\n        this.joystickPoint = null;\n        this.joystickRadius = null;\n        this.joystickPointer = null;\n        this.button = null;\n        this.buttonPoint = null;\n        this.buttonRadius = null;\n\n        // Polling for the joystick and button pushes\n        this.preUpdate = gamepadPoll.bind(this);\n    };\n\n    Phaser.Plugin.VirtualGamepad.prototype = Object.create(Phaser.Plugin.prototype);\n    Phaser.Plugin.VirtualGamepad.prototype.constructor = Phaser.Plugin.VirtualGamepad;\n\n    /**\n     * Add a joystick to the screen (only one joystick allowed for now)\n     *\n     * @method Phaser.Plugin.VirtualGamepad#addJoystick\n     * @param {number} x - Position (x-axis) of the joystick on the canvas\n     * @param {number} y - Position (y-axis) of the joystick on the canvas\n     * @param {number} scale - Size of the sprite. 1.0 is 100x100 pixels\n     * @param {String} key - key for the gamepad's spritesheet\n     * @param {Phaser.Sprite} The joystick object just created\n     */\n    Phaser.Plugin.VirtualGamepad.prototype.addJoystick = function (x, y, scale, key) {\n\n        // If we already have a joystick, return null\n        if (this.joystick !== null) {\n            return null;\n        }\n\n        // Add the joystick to the game\n        this.joystick = this.game.add.sprite(x, y, 'gamepad');\n        this.joystick.frame = 2;\n        this.joystick.anchor.set(0.5);\n        this.joystick.fixedToCamera = true;\n        this.joystick.scale.setTo(scale, scale);\n        this.joystickPad = this.game.add.sprite(x, y, 'gamepad');\n        this.joystickPad.frame = 3;\n        this.joystickPad.anchor.set(0.5);\n        this.joystickPad.fixedToCamera = true;\n        this.joystickPad.scale.setTo(scale, scale);\n\n        // Remember the coordinates of the joystick\n        this.joystickPoint = new Phaser.Point(x, y);\n\n        // Set up initial joystick properties\n        this.joystick.properties = {\n            inUse: false,\n            up: false,\n            down: false,\n            left: false,\n            right: false,\n            x: 0,\n            y: 0,\n            distance: 0,\n            angle: 0,\n            rotation: 0\n        };\n\n        // Set the touch area as defined by the button's radius\n        this.joystickRadius = scale * (this.joystick.width / 2);\n\n        return this.joystick;\n    };\n\n    /**\n     * Add a button to the screen (only one button allowed for now)\n     *\n     * @method Phaser.Plugin.VirtualGamepad#addButton\n     * @param {number} x - Position (x-axis) of the button on the canvas\n     * @param {number} y - Position (y-axis) of the button on the canvas\n     * @param {number} scale - Size of the sprite. 1.0 is 100x100 pixels\n     * @param {String} key - key for the gamepad's spritesheet\n     * @param {Phaser.Button} The button object just created\n     */\n    Phaser.Plugin.VirtualGamepad.prototype.addButton = function (x, y, scale, key) {\n\n        // If we already have a button, return null\n        if (this.button !== null) {\n            return null;\n        }\n\n        // Add the button to the game\n        this.button = this.game.add.button(x, y, key, null, this);\n        this.button.anchor.set(0.5);\n        this.button.fixedToCamera = true;\n        this.button.scale.setTo(scale, scale);\n\n        // Remember the coordinates of the button\n        this.buttonPoint = new Phaser.Point(x, y);\n\n        // Set up initial button state\n        this.button.isDown = false;\n\n        // Set the touch area as defined by the button's radius\n        this.buttonRadius = scale * (this.button.width / 2);\n\n        return this.button;\n    };\n\n    var buttonDown = function buttonDown() {\n        this.button.isDown = true;\n    };\n\n    var buttonUp = function buttonUp() {\n        this.button.isDown = false;\n    };\n\n    var gamepadPoll = function gamepadPoll() {\n\n        var resetJoystick = true;\n\n        // See if any pointers are in range of the joystick or buttons\n        this.button.isDown = false;\n        this.button.frame = 0;\n        this.game.input.pointers.forEach(function (p) {\n            resetJoystick = testDistance(p, this);\n        }, this);\n\n        // See if the mouse pointer is in range of the joystick or buttons\n        resetJoystick = testDistance(this.game.input.mousePointer, this);\n\n        // If the pointer is removed, reset the joystick\n        if (resetJoystick) {\n            if (this.joystickPointer === null || this.joystickPointer.isUp) {\n                moveJoystick(this.joystickPoint, this);\n                this.joystick.properties.inUse = false;\n                this.joystickPointer = null;\n            }\n        }\n    };\n\n    var testDistance = function testDistance(pointer, that) {\n\n        var reset = true;\n\n        // See if the pointer is over the joystick\n        var d = that.joystickPoint.distance(pointer.position);\n        if (pointer.isDown && (pointer === that.joystickPointer || d < that.joystickRadius)) {\n            reset = false;\n            that.joystick.properties.inUse = true;\n            that.joystickPointer = pointer;\n            moveJoystick(pointer.position, that);\n        }\n\n        // See if the pointer is over the button\n        d = that.buttonPoint.distance(pointer.position);\n        if (pointer.isDown && d < that.buttonRadius) {\n            that.button.isDown = true;\n            that.button.frame = 1;\n        }\n\n        return reset;\n    };\n\n    var moveJoystick = function moveJoystick(point, that) {\n\n        // Calculate x/y of pointer from joystick center\n        var deltaX = point.x - that.joystickPoint.x;\n        var deltaY = point.y - that.joystickPoint.y;\n\n        // Get the angle (radians) of the pointer on the joystick\n        var rotation = that.joystickPoint.angle(point);\n\n        // Set bounds on joystick pad\n        if (that.joystickPoint.distance(point) > that.joystickRadius) {\n            deltaX = deltaX === 0 ? 0 : Math.cos(rotation) * that.joystickRadius;\n            deltaY = deltaY === 0 ? 0 : Math.sin(rotation) * that.joystickRadius;\n        }\n\n        // Normalize x/y\n        that.joystick.properties.x = parseInt(deltaX / that.joystickRadius * 100, 10);\n        that.joystick.properties.y = parseInt(deltaY / that.joystickRadius * 100, 10);\n\n        // Set polar coordinates\n        that.joystick.properties.rotation = rotation;\n        that.joystick.properties.angle = 180 / Math.PI * rotation;\n        that.joystick.properties.distance = parseInt(that.joystickPoint.distance(point) / that.joystickRadius * 100, 10);\n\n        // Set d-pad directions\n        that.joystick.properties.up = rotation > UP_LOWER_BOUND && rotation <= UP_UPPER_BOUND;\n        that.joystick.properties.down = rotation > DOWN_LOWER_BOUND && rotation <= DOWN_UPPER_BOUND;\n        that.joystick.properties.right = rotation > RIGHT_LOWER_BOUND && rotation <= RIGHT_UPPER_BOUND;\n        that.joystick.properties.left = rotation > LEFT_LOWER_BOUND || rotation <= LEFT_UPPER_BOUND;\n\n        // Fix situation where left/right is true if X/Y is centered\n        if (that.joystick.properties.x === 0 && that.joystick.properties.y === 0) {\n            that.joystick.properties.right = false;\n            that.joystick.properties.left = false;\n        }\n\n        // Move joystick pad images\n        that.joystickPad.cameraOffset.x = that.joystickPoint.x + deltaX;\n        that.joystickPad.cameraOffset.y = that.joystickPoint.y + deltaY;\n    };\n})(Phaser);"]}